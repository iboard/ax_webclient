<section class="hero bg-[url('/images/clean_coding_800.png')] bg-cover bg-center drop-shadow-lg text-gray-300">
  <center class="backdrop-blur-lg p-5">
    <h1 class="title !text-gray-200 !text-2xl"><%= gettext "Welcome to %{name}", name: "Altex's WebClient!" %></h1>
    <p class="text-gray-200 text-sm"><%= gettext("An Elixir/Phoenix/Liveview Scaffold, by Andreas Altendorfer") %></p>
    <p class="text-gray-200 text-sm pt-10">Based on <code>mix phx.new --live --no-ecto</code></p>
  </center>
</section>

<section class="mx-10 lg:mx-40 max-w-prose">
  <%= if Plug.Conn.get_session(@conn, :current_user) do %>
    <center>
      <p class="font-semibold text-green-500 mb-6">
      <%= gettext "You're logged in as %{username}", %{username: SessionView.current_username(@conn)} %>
      </p>
    </center>
  <% end %>
  <article>
    <p class="font-semibold text-gray-500"><%= 
          gettext ~s"""
          As of %{date}, this is work in progess. The blog is more a playground and 
          sandbox for the project than a blog of it's own sake.
          """, %{ date: LayoutView.current_month_and_year() }
    %></p>
    <p class="my-4 font-normal text-gray-500"><%= 
          raw( gettext ~s"""
                  If you want to make a suggestion or wanna post something, please fork 
                  from %{url} and make a pull request through
                  """, url: "<a class='text-sky-500' href='https://github.com/iboard/altex'>iboard/altex</a>" )
    %> <a class="text-sky-500" href="https://github.com/iboard/altex/pulls">Github</a>.</p>
    <p class="mb-4 font-normal text-gray-500"><%= 
        raw(gettext "Posts can be added to <code>altex_iboard_cc/priv/posts/YYYY/MM-DD-Title</code>.") %>
    </p>

    <p class="max-w-prose">
    <.markdown body={ 
    ~s"""
    # Altex
    
    is a bunch of independent _mix projects_ which can be used in any Elixir
    and Phoenix application. It supports a clean architecture and well structured
    code.

    These projects are ...

    ## Mix projects

    - [axentity](https://hex.pm/packages/axentity)
    - [axrepo](https://hex.pm/packages/axrepo)
    - and this, [ax_webclient](https://hex.pm/packages/ax_webclient)

    ## Dependencies

    `ax_webclient` depends on `axrepo` which depends on `axentity`.
    In `ax_webclient` it is sufficient to add `axrepo` to your `deps()` in
    `mix.exs`.

    ## No database

    Frankly, I think databases are something obsolete nowadays. For a simple
    web-application you usually don't need one. Therefore we implemented a 
    simple _repository_ and _entity_ pattern in `axrepo` and `axentity`. 

    Where an `Entity` is a wrapper
    around any leagel Elixir term and `Repo` can store them wherever you want.

    For a simple scaffold, the filesystem and memory of a modern server is more
    than enough and with respond times less than 10ms, its also fast enough to store 
    and serve our data.

    ### dETS, Files

    The following directories should exist in your runtime environment

    ```bash
    ./data/test/
    ./data/dev/
    ./data/prod/
    ```

    For each "table"/"store" created in `Altex.Repo` you will find a corresponding
    file in these directories.

    ## Altex WebClient

    This here is a Phoenix 1.6 & Tailwind 3.0 application, using `axentity` and `axrepo`
    to store user, authentication, and profiles. 

    Other than that, we use 
    _[dashbitco/nimble_publisher](https://github.com/dashbitco/nimble_publisher)_
    for our simple blog.
    """ } />
    </p>

    <div class="mt-10 markdown bg-white p-4 shadow rounded-md">
      <img src="/images/altex.svg" class="p-10"/>
    </div>
    <div class="my-10">&nbsp;</div>
  </article>
</section>

